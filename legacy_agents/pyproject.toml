[build-system]
requires = [
    "setuptools ~= 65.3",
    "wheel",
    "build"
]
build-backend = "setuptools.build_meta"

[project]
name = "observability-legacy-agents"
version = "0.1.0"
description = "Observablity Legacy Agents package"
license = { "text" = "CLOSED"  }
readme = "README.md"
classifiers = [
    "Intended Audience :: Developers",
    "Operating System :: OS Independent",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
]
requires-python = ">= 3.9"
dependencies = [
    "attrs~=22.1.0",
    "azure-eventhub~=5.10.1",
    "azure-eventhub-checkpointstoreblob-aio~=1.1.4",
    "events-ingestion-client~=1.2.1",
    "google-auth==2.6.2",
    "python-dateutil~=2.8.2",
    "pytz~=2022.2.1",
    "requests~= 2.31.0",
    "boto3~=1.26.88",
    "boto3_stubs[essential]~=1.26.88",
    "databricks~=0.2",
    "databricks-sql-connector~=2.5.2",
    "azure-identity~=1.12.0",
    "backoff~=2.2.1",
    "pyodbc~=4.0.39",
    "retry~=0.9.2",
    "SQLAlchemy~=1.4.48",
    "types-SQLAlchemy~=1.4.53.38",
    "types-retry==0.9.9.4"
]


[project.optional-dependencies]
dev = [
    "black~=23.3.0",
    "invoke~=2.1.2",
    "isort~=5.12.0",
    "lxml~=4.9.1",
    "mypy~=1.3.0",
    "types-pytz~=2022.2.1",
    "types-requests~=2.31.0.1",
    "pre-commit~=3.3.2",
    "pytest~=7.3.1",
    "pytest-cov~=4.1.0",
    "types-python-dateutil~=2.8.2"
]
build = [
    "build",
    "setuptools~=65.3",
    "sphinx~=5.2.1",
    "sphinx-rtd-theme~=1.0.0",
    "wheel",
    "trove-classifiers",
]

[project.entry-points.console_scripts]
event-hubs-agent = "listener_agents.event_hubs_agent:main"
polling-agent = "poller_agents.poller:main"
aws-sqs-agent = "listener_agents.aws_sqs_agent:main"

[tool.setuptools]
include-package-data = true

[tool.setuptools.packages.find]
# see the important note for why we glob. TL;DR: Otherwise you don't get submodules
# https://setuptools.pypa.io/en/latest/userguide/package_discovery.html#finding-simple-packages
include = [
      "common*",
      "listener_agents*",
      "poller_agents*",
      "poll_pipelines*",
]
exclude = [ "*.tests", "tests*", "deploy*", "scripts*", "docs*"]

[tool.pytest.ini_options]
minversion = "7.0"
# --strict-markers means the markers have to be defined in this file before use, which prevents mispellings.
# --strict-config means that any warnings encountered while parsing the `pytest`configuration file will raise errors.
# -ra: show extra test data.
addopts = "-ra --strict-markers --strict-config"

python_files = "test_*.py"
python_classes = "Test_"
python_functions = "test_*"

# Look up "Testing Pyramid" for more insight into these markers.
markers = [
    "unit: The test is a unit test and is thus expected to be fast with little setup",
    "integration: The test is an integration test and is thus expected to be somewhat slower with a little more setup",
    "functional: The test is a functional test and is thus expected to be slower with greater setup",
]
filterwarnings = [
    # remove when resolved: https://github.com/marshmallow-code/apispec/issues/739
    'ignore:distutils Version classes are deprecated:DeprecationWarning:apispec'
]

# see: https://mypy.readthedocs.io/en/stable/config_file.html#using-a-pyproject-toml-file
# for settings that do not have a comment,
# see: https://mypy.readthedocs.io/en/stable/config_file.html
# for an explanation of their functionality.
# WARNING: When changing mypy configurations, be sure to test them after removing your .mypy_cache
[tool.mypy]
python_version = "3.9"
check_untyped_defs = true
disallow_untyped_decorators = true
disallow_untyped_defs = true
# This warns if any returns get cast to 'Any' due to type uncertainty by mypy. Since 'Any' is a valid return type
# for any function, returning any from a str function would be valid. This causes it to raise a warning instead.
warn_return_any = true
# This shows an error-code on failure, which is useful on debugging and possibly ignoring those particular
# lines if need-be.
show_error_codes = true
# This warns us if we're using '# type ignore' on a function which mypy knows it has definitions for.
# Hopefully this allows us to phase in type-checks on more libraries.
warn_unused_ignores = true
# Enables PEP 420 style namespace packages. This is a complex topic,
# but my reading suggests this is a generally 'good' idea.
# so see: https://mypy.readthedocs.io/en/stable/config_file.html#confval-namespace_packages
namespace_packages = true
warn_redundant_casts = true
# Remember that time you forgot to put a return in the function? This warns us of that.
# i.e.,
#
# def foo() -> str:
#     x = 'a' + 'x'
# will return an error for not having the return it promised.
warn_no_return = true
# This attempts to warn us when we encounter code that is currently unreachable.
warn_unreachable = true
# Now for some configurations to improve our error messages Attempts to make the output prettier for us mere mortals.
pretty = true
# This tries to show some additional context around where the error is occuring
show_error_context = true
# Mypy appears smart enough to ignore hidden directories. But it needs to scan __pycache__ for .pyc and pyi files,
# so it cannot honor gitignore.
exclude = [
    '''^(?:.*\/)+[tT]ests?''',
    'conftest.py',
    'venv/',
    'build/',
    'docs/'
]

[[tool.mypy.overrides]]
module = "events_ingestion_client"
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "events_ingestion_client.rest"
ignore_missing_imports = true


[[tool.mypy.overrides]]
module = "azure.eventhub.extensions.checkpointstoreblobaio.*"
ignore_errors = true

[[tool.mypy.overrides]]
module = "google.auth.*"
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "google.oauth2.*"
ignore_missing_imports = true


[tool.isort]
profile = "black"
line_length = 100

[tool.black]
line-length = 100
target-version = ['py39']
include = '\.pyi?$'
exclude = '''
(
  /(
      \.eggs         # exclude a few common directories in the
    | \.git          # root of the project
    | \.hg
    | \.mypy_cache
    | \.tox
    | \.venv
    | env
    | venv
    | _build
    | buck-out
    | build
    | dist
  )/
  | foo.py           # also separately exclude a file named foo.py in
                     # the root of the project
)
'''

# See: https://coverage.readthedocs.io/en/latest/config.html
[tool.coverage.run]
branch=true
# Every time there is a new top-level module, this will need to be expanded.
source = [
    "common",
    "listener_agents",
    "poller_agents",
]

[tool.coverage.report]
# We don't need to report the coverage lines on tests
omit = ["*/*tests/*"]
# This skips __init__.py and other empty files.
skip_empty=true

[tool.poetry]
# 2023-04-27 ECE: Adding this section to get Pycharm Python Interpreter created
name = "observability-legacy-agents"
version = "0.10"
authors = [
    "DataKitchen",
]
